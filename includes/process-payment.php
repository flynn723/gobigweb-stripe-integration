<?php
function gobigweb_stripe_process_payment() {
	if ( isset( $_POST['action'] ) && $_POST['action'] == 'stripe' && wp_verify_nonce( $_POST['stripe_nonce'], 'stripe-nonce' ) ) {
		global $stripe_options;
		// load the stripe libraries
		if ( !class_exists( 'Stripe' ) )
			require_once STRIPE_BASE_DIR . '/lib/Stripe.php';

		$email = isset( $_POST['email'] ) ? strip_tags( trim( $_POST['email'] ) ) : null;
		$billing_interval = strip_tags( trim( $_POST['billing_interval'] ) );
		$amount = base64_decode( $_POST['amount'] ) * 100;

		$billing_organization_name = strip_tags( trim( $_POST['billing_organization_name'] ) );
		$billing_address = strip_tags( trim( $_POST['billing_address'] ) );

		// retrieve the token generated by stripe.js
		$token = $_POST['stripeToken'];

		// check if we are using test mode
		if ( isset( $stripe_options['test_mode'] ) && $stripe_options['test_mode'] ) {
			$secret_key = trim( $stripe_options['test_secret_key'] );
		} else {
			$secret_key = trim( $stripe_options['live_secret_key'] );
		}
		Stripe::setApiKey( $secret_key );
		$using_discount = false;
		// check for a discount code and make sure it is valid if present
		if ( isset( $_POST['discount'] ) && strlen( trim( $_POST['discount'] ) ) > 0 ) {
			$using_discount = true;
			// we have a discount code, now check that it is valid
			try {
				$coupon = Stripe_Coupon::retrieve( trim( $_POST['discount'] ) );
				// if we got here, the coupon is valid
			} catch ( Exception $e ) {
				// an exception was caught, so the code is invalid
				wp_die( __( 'The coupon code you entered is invalid. Please click back and enter a valid code, or leave it blank for no discount.', 'gobigweb' ), 'Error' );
			}
		}
		if ( isset($billing_interval) && isset($amount) ) { // process a recurring payment
			// create a new plan
			$current_time = strval( time() );
			$custom_plan_id = "";
			if (isset($email)){
				$custom_plan_id = $email."_".$current_time;				
			} else {
				$custom_plan_id = "no_email_".$current_time;				
			}
			Stripe_Plan::create(array(
			        "id" => $custom_plan_id,
			        "interval" => $billing_interval,
			        "amount" => $amount,
			        "name" => $billing_organization_name ." " . $billing_interval ."ly $". $amount,
			        "currency" => "usd"
			    )
			);
			try {
				// if ( is_user_logged_in() ) {
				// 	$customer_id = get_user_meta( get_current_user_id(), '_stripe_customer_id', true );					
				// } else {
				// 	$customer_id = false;					
				// }
				if ( $customer_id ) {
					// retrieve our customer from Stripe
					$cu = Stripe_Customer::retrieve( $customer_id );
					// update the customer's card info (in case it has changed )
					$cu->card = $token;
					// update a customer's subscription
					$cu->updateSubscription( array(
							'plan' => $custom_plan_id
						)
					);
					// save everything
					$cu->save();
				} else {
					// create a brand new customer
					$customer = Stripe_Customer::create( array(
							'card' => $token,
							'plan' => $custom_plan_id,
							'email' => $email,
							'coupon' => $using_discount ? trim( $_POST['discount'] ) : null,
							'description' => $billing_address
						)
					);
					// if ( is_user_logged_in () ) {
					// 	// store the new customer ID in the meta table
					// 	update_user_meta( get_current_user_id(), '_stripe_customer_id', $customer->id );
					// }
					$customer_id = $customer->id;
				}
				// redirect on successful recurring payment setup
				$redirect = add_query_arg( 'payment', 'paid', $_POST['redirect'] );
			} catch ( Exception $e ) {
				// redirect on failure
				wp_die( $e, 'Error' );
				$redirect = add_query_arg( 'payment', 'failed', $_POST['redirect'] );
			}
		}
		// redirect back to our previous page with the added query variable
		wp_redirect( $redirect ); exit;
	}
}
add_action( 'init', 'gobigweb_stripe_process_payment' );
